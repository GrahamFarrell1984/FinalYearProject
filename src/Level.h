#pragma once

#include <SFML/Graphics/RenderWindow.hpp>
#include <SFML/Graphics/Sprite.hpp>
#include <array>

#include "Types.h"

class Level
{
public:
    explicit Level(const sf::Texture* texture, Point viewSize);
    void render(sf::RenderWindow& window, Rect camView);

private:
    sf::Sprite m_sprite;
    Point m_viewSize;
    static constexpr uint8_t Row          = 24;
    static constexpr uint8_t Col          = 32;
    static constexpr uint8_t MaxRowRender = 7;
    static constexpr uint8_t MaxColRender = 9;
    static constexpr uint8_t TileSize  = 64;
    static constexpr std::array<std::array<uint8_t, Col>, Row> LevelData = {
            { { 0, 10, 10, 10, 1, 10, 10, 1, 1, 1, 10, 10, 10, 1, 1, 1, 1, 1, 1, 10, 10, 1, 1, 10, 10, 10, 10, 10, 1, 1, 1, 2},
            { 7, 9, 9, 9, 27, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3},
            { 28, 28, 28, 28, 25, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
            { 29, 29, 29, 29, 25, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25, 25, 29, 29, 29, 29, 29, 29},
            { 7, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 27, 13, 13, 25, 25, 13, 13, 13, 13, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 15, 29, 29, 29, 29, 29, 29, 29, 25, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 9, 9, 3},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13, 13, 13, 25, 25, 13, 13, 13, 13, 13, 3},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13, 13, 13, 25, 25, 13, 13, 13, 13, 13, 13, 3},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 3},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 24, 26, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 3},
            { 28, 28, 28, 28, 25, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 25, 28, 28, 28, 28},
            { 29, 29, 29, 29, 25, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25, 25, 29, 29, 29, 29},
            { 28, 28, 28, 28, 25, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 25, 28, 28, 28, 28},
            { 29, 29, 29, 29, 25, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25, 25, 29, 29, 29, 29},
            { 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25, 25, 9, 9, 9, 3},
            { 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 5, 5, 5, 6} }
    };
};